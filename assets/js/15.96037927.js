(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{439:function(t,e,_){"use strict";_.r(e);var o=_(2),r=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-7db75659e0d54bac8dd5d79adf4011f3_1440w.webp",alt:"alt text"}})]),t._v(" "),e("h3",{attrs:{id:"try-catch-能捕获异步代码中的错误吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-能捕获异步代码中的错误吗"}},[t._v("#")]),t._v(" "),e("strong",[t._v("try-catch 能捕获异步代码中的错误吗？")])]),t._v(" "),e("p",[e("span",{staticStyle:{color:"#3178c6","font-weight":"bold"}},[t._v("try catch 不能捕获异步任务中的错误。")]),t._v("因为 try-catch 是同步代码，在 event-loop 中，同步代码优先于异步代码执行。因此 try-catch 执行完后，异步任务还没开始执行，所以无法捕获到其中的错误。想要捕获异步任务中的错误，可以在异步任务中使用 try-catch。")]),t._v(" "),e("h3",{attrs:{id:"不同数据类型之间的隐式转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同数据类型之间的隐式转换"}},[t._v("#")]),t._v(" "),e("strong",[t._v("不同数据类型之间的隐式转换")])]),t._v(" "),e("p",[t._v("转换为 String：")]),t._v(" "),e("ol",[e("li",[t._v('null => "null"')]),t._v(" "),e("li",[t._v('undefined => "undefined"')]),t._v(" "),e("li",[t._v('boolean => true 转换为 "true", false 转换为 "false"')]),t._v(" "),e("li",[t._v('number => 10 转换为 "10"，le21 转换为 "le+21"')]),t._v(" "),e("li",[t._v('array => 相当于调用 Array.prototype.join(\',\')，[1,2,3] 转换为 "1,2,3", [] 转换为 ""')]),t._v(" "),e("li",[t._v("object => 相当于调用 Object.prototype.toString()，返回 [object Object]")])]),t._v(" "),e("p",[t._v("转换为 number：")]),t._v(" "),e("ol",[e("li",[t._v("null => 0")]),t._v(" "),e("li",[t._v("undefined => NaN")]),t._v(" "),e("li",[t._v("String => 如果是数字字符串，直接转换成对应数字；如果是空字符串，转换为 0；否则一律转换成 NaN")]),t._v(" "),e("li",[t._v("boolean => true:1, false: 0")])]),t._v(" "),e("p",[t._v("转换为 boolean：\n"),e("br"),t._v('false、null、undefined、0、""、NaN 转换为 false，其他一律转换为 true')]),t._v(" "),e("p",[e("span",{staticStyle:{color:"#3178c6","font-weight":"bold"}},[t._v("注意：不同数据类型之间比较时的隐式转换，会将双方都转换成 number 再进行比较，因为 number 的优先级最高")])]),t._v(" "),e("h3",{attrs:{id:"prototype-和-proto-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prototype-和-proto-是什么"}},[t._v("#")]),t._v(" "),e("strong",[t._v("prototype 和 "),e("code",[t._v("__proto__")]),t._v(" 是什么？")])]),t._v(" "),e("ul",[e("li",[t._v("prototype，显式原型，只有函数才有。本质上是一个引用，指向函数的原型对象。")]),t._v(" "),e("li",[e("code",[t._v("__proto__")]),t._v("，隐式原型，实例上存在。本质上也是一个引用，指向创建该实例的构造函数的原型对象。")])]),t._v(" "),e("h3",{attrs:{id:"什么是原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型链"}},[t._v("#")]),t._v(" "),e("strong",[t._v("什么是原型链？")])]),t._v(" "),e("ol",[e("li",[t._v("当我们试图从一个实例获取属性的时候，首先会在实例本身找。如果找不到，就会去实例的原型对象上找（就这样一直找，直到找到原型链的尽头（null））。这种查找的机制，我们称之为原型链。")]),t._v(" "),e("li",[t._v("js 中所有的对象都是由 Object 构造函数生成的，且原型链的顶端为 null，所以 "),e("span",{staticStyle:{color:"#3178c6","font-weight":"bold"}},[t._v("Object.prototype."),e("code",[t._v("__proto__")]),t._v(" == null")])])]),t._v(" "),e("h3",{attrs:{id:"前后端联调请求参数的格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前后端联调请求参数的格式"}},[t._v("#")]),t._v(" "),e("strong",[t._v("前后端联调请求参数的格式")])]),t._v(" "),e("p",[t._v("默认情况下，后端接口接收和响应 json 字符串数据。但是前端请求默认为 "),e("code",[t._v("application/x-www-form-urlencoded")]),t._v(" 格式，会将参数转换为键值对 "),e("code",[t._v("?name=zhd&age=22")]),t._v(" 发送给后端。因此我们需要设置 "),e("code",[t._v("content-type: application/json")]),t._v(" 将参数转换为 json 字符串发送给后端。")])])}),[],!1,null,null,null);e.default=r.exports}}]);